// Generated by gencpp from file xf_mic_asr_offline/BuzzerState.msg
// DO NOT EDIT!


#ifndef XF_MIC_ASR_OFFLINE_MESSAGE_BUZZERSTATE_H
#define XF_MIC_ASR_OFFLINE_MESSAGE_BUZZERSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xf_mic_asr_offline
{
template <class ContainerAllocator>
struct BuzzerState_
{
  typedef BuzzerState_<ContainerAllocator> Type;

  BuzzerState_()
    : freq(0)
    , on_time(0.0)
    , off_time(0.0)
    , repeat(0)  {
    }
  BuzzerState_(const ContainerAllocator& _alloc)
    : freq(0)
    , on_time(0.0)
    , off_time(0.0)
    , repeat(0)  {
  (void)_alloc;
    }



   typedef uint16_t _freq_type;
  _freq_type freq;

   typedef float _on_time_type;
  _on_time_type on_time;

   typedef float _off_time_type;
  _off_time_type off_time;

   typedef uint16_t _repeat_type;
  _repeat_type repeat;





  typedef boost::shared_ptr< ::xf_mic_asr_offline::BuzzerState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xf_mic_asr_offline::BuzzerState_<ContainerAllocator> const> ConstPtr;

}; // struct BuzzerState_

typedef ::xf_mic_asr_offline::BuzzerState_<std::allocator<void> > BuzzerState;

typedef boost::shared_ptr< ::xf_mic_asr_offline::BuzzerState > BuzzerStatePtr;
typedef boost::shared_ptr< ::xf_mic_asr_offline::BuzzerState const> BuzzerStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xf_mic_asr_offline::BuzzerState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xf_mic_asr_offline::BuzzerState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xf_mic_asr_offline::BuzzerState_<ContainerAllocator1> & lhs, const ::xf_mic_asr_offline::BuzzerState_<ContainerAllocator2> & rhs)
{
  return lhs.freq == rhs.freq &&
    lhs.on_time == rhs.on_time &&
    lhs.off_time == rhs.off_time &&
    lhs.repeat == rhs.repeat;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xf_mic_asr_offline::BuzzerState_<ContainerAllocator1> & lhs, const ::xf_mic_asr_offline::BuzzerState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xf_mic_asr_offline

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::xf_mic_asr_offline::BuzzerState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xf_mic_asr_offline::BuzzerState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xf_mic_asr_offline::BuzzerState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xf_mic_asr_offline::BuzzerState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xf_mic_asr_offline::BuzzerState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xf_mic_asr_offline::BuzzerState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xf_mic_asr_offline::BuzzerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf6a6f6f285012bcc0e11a4dd35a61af";
  }

  static const char* value(const ::xf_mic_asr_offline::BuzzerState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf6a6f6f285012bcULL;
  static const uint64_t static_value2 = 0xc0e11a4dd35a61afULL;
};

template<class ContainerAllocator>
struct DataType< ::xf_mic_asr_offline::BuzzerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xf_mic_asr_offline/BuzzerState";
  }

  static const char* value(const ::xf_mic_asr_offline::BuzzerState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xf_mic_asr_offline::BuzzerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 freq\n"
"float32 on_time\n"
"float32 off_time\n"
"uint16 repeat\n"
;
  }

  static const char* value(const ::xf_mic_asr_offline::BuzzerState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xf_mic_asr_offline::BuzzerState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.freq);
      stream.next(m.on_time);
      stream.next(m.off_time);
      stream.next(m.repeat);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BuzzerState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xf_mic_asr_offline::BuzzerState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xf_mic_asr_offline::BuzzerState_<ContainerAllocator>& v)
  {
    s << indent << "freq: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.freq);
    s << indent << "on_time: ";
    Printer<float>::stream(s, indent + "  ", v.on_time);
    s << indent << "off_time: ";
    Printer<float>::stream(s, indent + "  ", v.off_time);
    s << indent << "repeat: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.repeat);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XF_MIC_ASR_OFFLINE_MESSAGE_BUZZERSTATE_H

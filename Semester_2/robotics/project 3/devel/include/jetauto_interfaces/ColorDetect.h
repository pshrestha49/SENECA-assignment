// Generated by gencpp from file jetauto_interfaces/ColorDetect.msg
// DO NOT EDIT!


#ifndef JETAUTO_INTERFACES_MESSAGE_COLORDETECT_H
#define JETAUTO_INTERFACES_MESSAGE_COLORDETECT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jetauto_interfaces
{
template <class ContainerAllocator>
struct ColorDetect_
{
  typedef ColorDetect_<ContainerAllocator> Type;

  ColorDetect_()
    : color_name()
    , detect_type()  {
    }
  ColorDetect_(const ContainerAllocator& _alloc)
    : color_name(_alloc)
    , detect_type(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _color_name_type;
  _color_name_type color_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _detect_type_type;
  _detect_type_type detect_type;





  typedef boost::shared_ptr< ::jetauto_interfaces::ColorDetect_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jetauto_interfaces::ColorDetect_<ContainerAllocator> const> ConstPtr;

}; // struct ColorDetect_

typedef ::jetauto_interfaces::ColorDetect_<std::allocator<void> > ColorDetect;

typedef boost::shared_ptr< ::jetauto_interfaces::ColorDetect > ColorDetectPtr;
typedef boost::shared_ptr< ::jetauto_interfaces::ColorDetect const> ColorDetectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jetauto_interfaces::ColorDetect_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jetauto_interfaces::ColorDetect_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jetauto_interfaces::ColorDetect_<ContainerAllocator1> & lhs, const ::jetauto_interfaces::ColorDetect_<ContainerAllocator2> & rhs)
{
  return lhs.color_name == rhs.color_name &&
    lhs.detect_type == rhs.detect_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jetauto_interfaces::ColorDetect_<ContainerAllocator1> & lhs, const ::jetauto_interfaces::ColorDetect_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jetauto_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::jetauto_interfaces::ColorDetect_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jetauto_interfaces::ColorDetect_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jetauto_interfaces::ColorDetect_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jetauto_interfaces::ColorDetect_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetauto_interfaces::ColorDetect_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetauto_interfaces::ColorDetect_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jetauto_interfaces::ColorDetect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4e4e09872769a19519f9568bfbc9dbd6";
  }

  static const char* value(const ::jetauto_interfaces::ColorDetect_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4e4e09872769a195ULL;
  static const uint64_t static_value2 = 0x19f9568bfbc9dbd6ULL;
};

template<class ContainerAllocator>
struct DataType< ::jetauto_interfaces::ColorDetect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jetauto_interfaces/ColorDetect";
  }

  static const char* value(const ::jetauto_interfaces::ColorDetect_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jetauto_interfaces::ColorDetect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string color_name\n"
"string detect_type\n"
;
  }

  static const char* value(const ::jetauto_interfaces::ColorDetect_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jetauto_interfaces::ColorDetect_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.color_name);
      stream.next(m.detect_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ColorDetect_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jetauto_interfaces::ColorDetect_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jetauto_interfaces::ColorDetect_<ContainerAllocator>& v)
  {
    s << indent << "color_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.color_name);
    s << indent << "detect_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.detect_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JETAUTO_INTERFACES_MESSAGE_COLORDETECT_H

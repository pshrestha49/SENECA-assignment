// Generated by gencpp from file jetauto_interfaces/SetPoseResponse.msg
// DO NOT EDIT!


#ifndef JETAUTO_INTERFACES_MESSAGE_SETPOSERESPONSE_H
#define JETAUTO_INTERFACES_MESSAGE_SETPOSERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jetauto_interfaces
{
template <class ContainerAllocator>
struct SetPoseResponse_
{
  typedef SetPoseResponse_<ContainerAllocator> Type;

  SetPoseResponse_()
    : success(false)
    , pulse()
    , min_variation(0)
    , current_pulse()  {
    }
  SetPoseResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , pulse(_alloc)
    , min_variation(0)
    , current_pulse(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _pulse_type;
  _pulse_type pulse;

   typedef uint32_t _min_variation_type;
  _min_variation_type min_variation;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _current_pulse_type;
  _current_pulse_type current_pulse;





  typedef boost::shared_ptr< ::jetauto_interfaces::SetPoseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jetauto_interfaces::SetPoseResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SetPoseResponse_

typedef ::jetauto_interfaces::SetPoseResponse_<std::allocator<void> > SetPoseResponse;

typedef boost::shared_ptr< ::jetauto_interfaces::SetPoseResponse > SetPoseResponsePtr;
typedef boost::shared_ptr< ::jetauto_interfaces::SetPoseResponse const> SetPoseResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jetauto_interfaces::SetPoseResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jetauto_interfaces::SetPoseResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jetauto_interfaces::SetPoseResponse_<ContainerAllocator1> & lhs, const ::jetauto_interfaces::SetPoseResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.pulse == rhs.pulse &&
    lhs.min_variation == rhs.min_variation &&
    lhs.current_pulse == rhs.current_pulse;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jetauto_interfaces::SetPoseResponse_<ContainerAllocator1> & lhs, const ::jetauto_interfaces::SetPoseResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jetauto_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::jetauto_interfaces::SetPoseResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jetauto_interfaces::SetPoseResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jetauto_interfaces::SetPoseResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jetauto_interfaces::SetPoseResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetauto_interfaces::SetPoseResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetauto_interfaces::SetPoseResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jetauto_interfaces::SetPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "caf1f9deb5c044797acc59cdbedd492f";
  }

  static const char* value(const ::jetauto_interfaces::SetPoseResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcaf1f9deb5c04479ULL;
  static const uint64_t static_value2 = 0x7acc59cdbedd492fULL;
};

template<class ContainerAllocator>
struct DataType< ::jetauto_interfaces::SetPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jetauto_interfaces/SetPoseResponse";
  }

  static const char* value(const ::jetauto_interfaces::SetPoseResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jetauto_interfaces::SetPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success\n"
"float32[] pulse\n"
"uint32 min_variation\n"
"float32[] current_pulse\n"
"\n"
;
  }

  static const char* value(const ::jetauto_interfaces::SetPoseResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jetauto_interfaces::SetPoseResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.pulse);
      stream.next(m.min_variation);
      stream.next(m.current_pulse);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetPoseResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jetauto_interfaces::SetPoseResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jetauto_interfaces::SetPoseResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "pulse[]" << std::endl;
    for (size_t i = 0; i < v.pulse.size(); ++i)
    {
      s << indent << "  pulse[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pulse[i]);
    }
    s << indent << "min_variation: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.min_variation);
    s << indent << "current_pulse[]" << std::endl;
    for (size_t i = 0; i < v.current_pulse.size(); ++i)
    {
      s << indent << "  current_pulse[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.current_pulse[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // JETAUTO_INTERFACES_MESSAGE_SETPOSERESPONSE_H

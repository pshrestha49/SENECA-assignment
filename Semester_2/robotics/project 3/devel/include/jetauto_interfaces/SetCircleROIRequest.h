// Generated by gencpp from file jetauto_interfaces/SetCircleROIRequest.msg
// DO NOT EDIT!


#ifndef JETAUTO_INTERFACES_MESSAGE_SETCIRCLEROIREQUEST_H
#define JETAUTO_INTERFACES_MESSAGE_SETCIRCLEROIREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <jetauto_interfaces/ROI.h>

namespace jetauto_interfaces
{
template <class ContainerAllocator>
struct SetCircleROIRequest_
{
  typedef SetCircleROIRequest_<ContainerAllocator> Type;

  SetCircleROIRequest_()
    : data()  {
    }
  SetCircleROIRequest_(const ContainerAllocator& _alloc)
    : data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::jetauto_interfaces::ROI_<ContainerAllocator>  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::jetauto_interfaces::SetCircleROIRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jetauto_interfaces::SetCircleROIRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetCircleROIRequest_

typedef ::jetauto_interfaces::SetCircleROIRequest_<std::allocator<void> > SetCircleROIRequest;

typedef boost::shared_ptr< ::jetauto_interfaces::SetCircleROIRequest > SetCircleROIRequestPtr;
typedef boost::shared_ptr< ::jetauto_interfaces::SetCircleROIRequest const> SetCircleROIRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jetauto_interfaces::SetCircleROIRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jetauto_interfaces::SetCircleROIRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jetauto_interfaces::SetCircleROIRequest_<ContainerAllocator1> & lhs, const ::jetauto_interfaces::SetCircleROIRequest_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jetauto_interfaces::SetCircleROIRequest_<ContainerAllocator1> & lhs, const ::jetauto_interfaces::SetCircleROIRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jetauto_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::jetauto_interfaces::SetCircleROIRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jetauto_interfaces::SetCircleROIRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jetauto_interfaces::SetCircleROIRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jetauto_interfaces::SetCircleROIRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetauto_interfaces::SetCircleROIRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetauto_interfaces::SetCircleROIRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jetauto_interfaces::SetCircleROIRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bce3bbadade927e357164665e1138f1e";
  }

  static const char* value(const ::jetauto_interfaces::SetCircleROIRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbce3bbadade927e3ULL;
  static const uint64_t static_value2 = 0x57164665e1138f1eULL;
};

template<class ContainerAllocator>
struct DataType< ::jetauto_interfaces::SetCircleROIRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jetauto_interfaces/SetCircleROIRequest";
  }

  static const char* value(const ::jetauto_interfaces::SetCircleROIRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jetauto_interfaces::SetCircleROIRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jetauto_interfaces/ROI data\n"
"\n"
"================================================================================\n"
"MSG: jetauto_interfaces/ROI\n"
"int16 y_min\n"
"int16 y_max\n"
"int16 x_min\n"
"int16 x_max\n"
"float32 scale\n"
;
  }

  static const char* value(const ::jetauto_interfaces::SetCircleROIRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jetauto_interfaces::SetCircleROIRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetCircleROIRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jetauto_interfaces::SetCircleROIRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jetauto_interfaces::SetCircleROIRequest_<ContainerAllocator>& v)
  {
    s << indent << "data: ";
    s << std::endl;
    Printer< ::jetauto_interfaces::ROI_<ContainerAllocator> >::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JETAUTO_INTERFACES_MESSAGE_SETCIRCLEROIREQUEST_H

// Generated by gencpp from file jetauto_interfaces/ColorInfo.msg
// DO NOT EDIT!


#ifndef JETAUTO_INTERFACES_MESSAGE_COLORINFO_H
#define JETAUTO_INTERFACES_MESSAGE_COLORINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jetauto_interfaces
{
template <class ContainerAllocator>
struct ColorInfo_
{
  typedef ColorInfo_<ContainerAllocator> Type;

  ColorInfo_()
    : color()
    , width(0)
    , height(0)
    , x(0)
    , y(0)
    , radius(0)
    , angle(0)  {
    }
  ColorInfo_(const ContainerAllocator& _alloc)
    : color(_alloc)
    , width(0)
    , height(0)
    , x(0)
    , y(0)
    , radius(0)
    , angle(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _color_type;
  _color_type color;

   typedef int32_t _width_type;
  _width_type width;

   typedef int32_t _height_type;
  _height_type height;

   typedef int32_t _x_type;
  _x_type x;

   typedef int32_t _y_type;
  _y_type y;

   typedef int32_t _radius_type;
  _radius_type radius;

   typedef int32_t _angle_type;
  _angle_type angle;





  typedef boost::shared_ptr< ::jetauto_interfaces::ColorInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jetauto_interfaces::ColorInfo_<ContainerAllocator> const> ConstPtr;

}; // struct ColorInfo_

typedef ::jetauto_interfaces::ColorInfo_<std::allocator<void> > ColorInfo;

typedef boost::shared_ptr< ::jetauto_interfaces::ColorInfo > ColorInfoPtr;
typedef boost::shared_ptr< ::jetauto_interfaces::ColorInfo const> ColorInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jetauto_interfaces::ColorInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jetauto_interfaces::ColorInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jetauto_interfaces::ColorInfo_<ContainerAllocator1> & lhs, const ::jetauto_interfaces::ColorInfo_<ContainerAllocator2> & rhs)
{
  return lhs.color == rhs.color &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.radius == rhs.radius &&
    lhs.angle == rhs.angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jetauto_interfaces::ColorInfo_<ContainerAllocator1> & lhs, const ::jetauto_interfaces::ColorInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jetauto_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::jetauto_interfaces::ColorInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jetauto_interfaces::ColorInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jetauto_interfaces::ColorInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jetauto_interfaces::ColorInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetauto_interfaces::ColorInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetauto_interfaces::ColorInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jetauto_interfaces::ColorInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "42545afa01acbfe53f3b1df9340270d6";
  }

  static const char* value(const ::jetauto_interfaces::ColorInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x42545afa01acbfe5ULL;
  static const uint64_t static_value2 = 0x3f3b1df9340270d6ULL;
};

template<class ContainerAllocator>
struct DataType< ::jetauto_interfaces::ColorInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jetauto_interfaces/ColorInfo";
  }

  static const char* value(const ::jetauto_interfaces::ColorInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jetauto_interfaces::ColorInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string color\n"
"int32 width\n"
"int32 height\n"
"int32 x\n"
"int32 y\n"
"int32 radius\n"
"int32 angle\n"
;
  }

  static const char* value(const ::jetauto_interfaces::ColorInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jetauto_interfaces::ColorInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.color);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.radius);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ColorInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jetauto_interfaces::ColorInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jetauto_interfaces::ColorInfo_<ContainerAllocator>& v)
  {
    s << indent << "color: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.color);
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y);
    s << indent << "radius: ";
    Printer<int32_t>::stream(s, indent + "  ", v.radius);
    s << indent << "angle: ";
    Printer<int32_t>::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JETAUTO_INTERFACES_MESSAGE_COLORINFO_H
